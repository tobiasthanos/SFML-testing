#define PI 3.1415926535898
#define GL_GLEXT_PROTOTYPES

const double DEG2RAD = PI/180;

////////////////////////////////////////////////////////////
// Headers
////////////////////////////////////////////////////////////
#include <SFML/Graphics.hpp>
#include <SFML/OpenGL.hpp>
#include <stdio.h>      // Header file for standard file i/o.
#include <stdlib.h>     // Header file for malloc/free.
#include <sstream>
#include <fstream>
#include <iostream>
#include <string.h>
#include <cstdarg>
#include <vector>

int winwidth = 1280;
int winheight = 1024;

float times=0;

GLint location;

using namespace std;
#include "MersenneTwister.h"
#include "randerson.cpp"
#include "image.cpp"

#include "glue.h"

#include "shader.h"


sf::RenderWindow window(sf::VideoMode(winwidth, winheight), "Shadertoytest", sf::Style::Default, sf::ContextSettings(32));


Shader shad; 
Shader inv;
//Shader shadred;

#include "font.h"
#include "quad.h"
#include "text.h"
#include "editor.cpp"

Editor editor;

void updateshader()
{

	shad.loadcompilelink();
	shad.printlog();
	editor.savefile("frag.frag");

};

void init()
{


	window.setVerticalSyncEnabled(true);
	
	LoadGLTextures();				// Load The Texture(s) 
	BuildFont();
	glActiveTexture(GL_TEXTURE0);
	glBindTexture(GL_TEXTURE_2D, texture[1]);

	// Enable Z-buffer read and write
	glEnable(GL_DEPTH_TEST);
	glDepthMask(GL_TRUE);
	glClearDepth(1.0f);

	// Setup a perspective projection
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
	glClearColor(0.5f, 0.5f, 0.5f, 0.0f);	// Clear The Background Color To Grey 
	gluPerspective(90.f, 1.f, 1.f, 500.f);

	shad.loadcompilelink();
	shad.printlog();
	inv.loadcompilelinkinv();
	editor.initialize();

}

void processevent(sf::Event event)
{


	// Close window : exit
	if (event.type == sf::Event::Closed)
	{
		window.close();
	}

	if ( (event.type == sf::Event::KeyPressed) )
		{

		// Escape key : exit
		if ((event.key.code == sf::Keyboard::Escape))
		{
			window.close();
		}

		if ((event.key.code == sf::Keyboard::F1))
		{
			editor.vis();
		}
	
		if ((event.key.code == sf::Keyboard::Up))
		{
			editor.passup();
		}
	
		if ((event.key.code == sf::Keyboard::Down))
		{
			editor.passdown();
		}
	
		if ((event.key.code == sf::Keyboard::Left))
		{
			editor.passleft();
		}
	
		if ((event.key.code == sf::Keyboard::Right))
		{
			editor.passright();
		}
	
		if ((event.key.code == sf::Keyboard::Return))
		{
			editor.passenter();
		}
	
		if ((event.key.code == sf::Keyboard::Back))
		{
			editor.passback();
			updateshader();
		}
	
		if ((event.key.code == sf::Keyboard::Delete))
		{
			editor.passdelete();
			updateshader();
		}
		
	updateshader();
		
	}
	else
	{
		if( event.type == sf::Event::TextEntered )
		{
			if ( event.text.unicode < 126 && event.text.unicode > 31 )
			{
				editor.passkey((char)event.text.unicode);
				
				updateshader();
			}
		}
		
	}
	
	




	// Adjust the viewport when the window is resized
	if (event.type == sf::Event::Resized)
	{
		winwidth = event.size.width;
		winheight = event.size.height;
		glViewport(0, 0, winwidth, winheight);
	}

	

}


////////////////////////////////////////////////////////////
/// Entry point of application
///
/// \return Application exit code
///
////////////////////////////////////////////////////////////
int main()
{

	init();


	// Create a clock for measuring the time elapsed
	sf::Clock clock;

	// Start game loop
	while (window.isOpen())
	{
		// Process events
		sf::Event event;
		while (window.pollEvent(event))
		{
			processevent(event);
		}


		glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);		// Clear The Screen And The Depth Buffer
		glLoadIdentity();				// Reset The View

		// Activate the window before using OpenGL commands.
		// This is useless here because we have only one window which is
		// always the active one, but don't forget it if you use multiple windows
		window.setActive();

		// Clear the depth buffer
		glClear(GL_DEPTH_BUFFER_BIT);

		// We get the position of the mouse cursor, so that we can move the box accordingly
		float x =  sf::Mouse::getPosition(window).x * 200.f / window.getSize().x - 100.f;
		float y = -sf::Mouse::getPosition(window).y * 200.f / window.getSize().y + 100.f;

		times+=.05;
		glUniform1f(location,times);
		editor.update();
		//render the console

		enterScreenSpace();

		//shad.enable();
		//	shad.printlog();
		editor.render();
		//shad.disable();

		leaveScreenSpace();


		// Finally, display the rendered frame on screen
		window.display();
	}

	return EXIT_SUCCESS;
}
